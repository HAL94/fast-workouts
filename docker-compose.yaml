services:
  app:
    build:
      context: .
      dockerfile: Dockerfile

    ports:
      - "8000:8000"

    volumes:
      - .:/usr/src/app
      - ./alembic.ini:/usr/src/app/alembic.ini
      - ./alembic:/usr/src/app/alembic

    env_file:
      - ./.env

    depends_on:
      - postgres
      - redis
      - migration
      - celery

  migration:
    build:
      context: .
      dockerfile: Dockerfile

    # The command to execute the Alembic migration script
    command: ["uv", "run", "alembic", "upgrade", "head"]

    # This service should not restart after it has successfully completed its job
    restart: "no"
    env_file:
      - ./.env
    depends_on:
      - postgres
    volumes:
      - .:/usr/src/app
  
  seeder:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["uv", "run", "-m", "app.seed.run"]
    restart: "no"
    env_file:
      - ./.env
    depends_on:
      - postgres
      - migration
    volumes:
      - .:/usr/src/app

  postgres:
    image: postgres:17.4-alpine3.21
    environment:
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PW}
      POSTGRES_PORT: ${PG_PORT}

    # volumes:
    #   - ./postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7.2.5-alpine
    # volumes:
    #   - ./redis_data:/data
    ports:
      - "6379:6379"

  celery:
    # Use the same image as the main app, as it contains all the application code and dependencies
    build:
      context: .
      dockerfile: Dockerfile

    env_file:
      - ./.env

    # The command to start the Celery worker
    command:
      [
        "uv",
        "run",
        "celery",
        "-A",
        "app.worker.celery_app.celery_app",
        "worker",
        "-l",
        "INFO",
      ]
    depends_on:
      - redis
      - migration
