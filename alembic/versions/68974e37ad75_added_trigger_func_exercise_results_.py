"""added_trigger_func_exercise_results_table

Revision ID: 68974e37ad75
Revises: 155037622728
Create Date: 2025-08-04 11:52:06.174635

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = '68974e37ad75'
down_revision: Union[str, None] = '155037622728'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    public_validate_exercise_plan_id = PGFunction(
        schema="public",
        signature="validate_exercise_plan_id()",
        definition="RETURNS TRIGGER AS $$\n        DECLARE\n            current_plan_id INTEGER;\n            exercise_parent_plan_id INTEGER;\n        BEGIN\n            IF NEW.exercise_plan_id IS NOT NULL THEN\n                SELECT workout_plan_id INTO current_plan_id\n                FROM workout_sessions\n                WHERE id = NEW.workout_session_id;\n                \n                SELECT workout_plan_id INTO exercise_parent_plan_id\n                FROM exercise_plans\n                WHERE id = NEW.exercise_plan_id;\n                \n                -- Check if the workout plans are the same\n                IF current_plan_id IS DISTINCT FROM exercise_parent_plan_id THEN\n                    RAISE EXCEPTION 'Exercise result references a plan not associated with the session''s workout plan.';\n                END IF;\n            END IF;\n            RETURN NEW;\n        END\n        $$ LANGUAGE plpgsql"
    )
    op.create_entity(public_validate_exercise_plan_id)

    public_exercise_results_check_exercise_plan_id_relation = PGTrigger(
        schema="public",
        signature="check_exercise_plan_id_relation",
        on_entity="public.exercise_results",
        is_constraint=False,
        definition='BEFORE INSERT OR UPDATE ON public.exercise_results\n        FOR EACH ROW\n        EXECUTE FUNCTION validate_exercise_plan_id()'
    )
    op.create_entity(public_exercise_results_check_exercise_plan_id_relation)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    public_exercise_results_check_exercise_plan_id_relation = PGTrigger(
        schema="public",
        signature="check_exercise_plan_id_relation",
        on_entity="public.exercise_results",
        is_constraint=False,
        definition='BEFORE INSERT OR UPDATE ON public.exercise_results\n        FOR EACH ROW\n        EXECUTE FUNCTION validate_exercise_plan_id()'
    )
    op.drop_entity(public_exercise_results_check_exercise_plan_id_relation)

    public_validate_exercise_plan_id = PGFunction(
        schema="public",
        signature="validate_exercise_plan_id()",
        definition="RETURNS TRIGGER AS $$\n        DECLARE\n            current_plan_id INTEGER;\n            exercise_parent_plan_id INTEGER;\n        BEGIN\n            IF NEW.exercise_plan_id IS NOT NULL THEN\n                SELECT workout_plan_id INTO current_plan_id\n                FROM workout_sessions\n                WHERE id = NEW.workout_session_id;\n                \n                SELECT workout_plan_id INTO exercise_parent_plan_id\n                FROM exercise_plans\n                WHERE id = NEW.exercise_plan_id;\n                \n                -- Check if the workout plans are the same\n                IF current_plan_id IS DISTINCT FROM exercise_parent_plan_id THEN\n                    RAISE EXCEPTION 'Exercise result references a plan not associated with the session''s workout plan.';\n                END IF;\n            END IF;\n            RETURN NEW;\n        END\n        $$ LANGUAGE plpgsql"
    )
    op.drop_entity(public_validate_exercise_plan_id)

    # ### end Alembic commands ###
