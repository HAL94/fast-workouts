"""restructure_scheduling_model

Revision ID: cb37451d4e6c
Revises: 6bfbde84817e
Create Date: 2025-08-09 14:23:00.006902

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = 'cb37451d4e6c'
down_revision: Union[str, None] = '6bfbde84817e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('workout_plan_schedules', sa.Column('reminder_status', sa.String(), nullable=False))
    op.add_column('workout_plan_schedules', sa.Column('reminder_scheduled_send_time', sa.DateTime(), nullable=True))
    op.add_column('workout_plan_schedules', sa.Column('auto_start_session', sa.Boolean(), nullable=False))
    op.drop_column('workout_plan_schedules', 'reminder_sent')
    public_validate_exercise_plan_id = PGFunction(
        schema="public",
        signature="validate_exercise_plan_id()",
        definition="RETURNS TRIGGER AS $$\n        DECLARE\n            current_plan_id INTEGER;\n            exercise_parent_plan_id INTEGER;\n        BEGIN\n            IF NEW.exercise_plan_id IS NOT NULL THEN\n                SELECT workout_plan_id INTO current_plan_id\n                FROM workout_sessions\n                WHERE id = NEW.workout_session_id;\n                \n                SELECT workout_plan_id INTO exercise_parent_plan_id\n                FROM exercise_plans\n                WHERE id = NEW.exercise_plan_id;\n                \n                -- Check if the workout plans are the same\n                IF current_plan_id IS DISTINCT FROM exercise_parent_plan_id THEN\n                    RAISE EXCEPTION 'Exercise result references an exercise plan not associated with the session''s workout plan.';\n                END IF;\n            END IF;\n            RETURN NEW;\n        END\n        $$ LANGUAGE plpgsql"
    )
    op.replace_entity(public_validate_exercise_plan_id)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    public_validate_exercise_plan_id = PGFunction(
        schema="public",
        signature="validate_exercise_plan_id()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n        DECLARE\n            current_plan_id INTEGER;\n            exercise_parent_plan_id INTEGER;\n        BEGIN\n            IF NEW.exercise_plan_id IS NOT NULL THEN\n                SELECT workout_plan_id INTO current_plan_id\n                FROM workout_sessions\n                WHERE id = NEW.workout_session_id;\n                \n                SELECT workout_plan_id INTO exercise_parent_plan_id\n                FROM exercise_plans\n                WHERE id = NEW.exercise_plan_id;\n                \n                -- Check if the workout plans are the same\n                IF current_plan_id IS DISTINCT FROM exercise_parent_plan_id THEN\n                    RAISE EXCEPTION 'Exercise result references a plan not associated with the session''s workout plan.';\n                END IF;\n            END IF;\n            RETURN NEW;\n        END\n        $function$"
    )
    op.replace_entity(public_validate_exercise_plan_id)
    op.add_column('workout_plan_schedules', sa.Column('reminder_sent', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_column('workout_plan_schedules', 'auto_start_session')
    op.drop_column('workout_plan_schedules', 'reminder_scheduled_send_time')
    op.drop_column('workout_plan_schedules', 'reminder_status')
    # ### end Alembic commands ###
