TASKS:

- Report endpoint for a workout/session [x]

- Add Dockerization
    - Dockerfile for backend service
    - docker-compose file for various services:
        - Backend App
        - Postgres
        - Migration (Basic app data)
        - Redis
        - Celery
        
- Task/Set ordering:
    - find a way to guarantee the exercise/set plans orders

- Scheduling:
    - Restructure Model:
        - Add field "reminder_send_status" [string/enum]
            - Possible Values: 'pending' | 'sent'
        - Add field "reminder_scheduled_send_time" [datetime]
            - When will the reminder be sent.
        - Add/Modify field "reminder_send_time" [datetime]
            - Records reminder actual send time.
        - Add field "auto_start_session" [bool]
            - Will create a session and start it when the schedule time is reached. (needs a worker)
    - When a schedule is successfully created for a workout plan, a workout session should be created with state of 'scheduled'.
        - if the field "auto_start_session" is set to True, then the session should be started automatically once we reach the schedule time.
    - If the schedule has a reminder, and reminder is sent successfully, the schedule entity must be updated to reflect the sending status, ensuring:
        - reminder_send_status -> "sent".
        - reminder_send_time -> actual date/time scheduled sent.
        - If fthe field "auto_start_session" is set to True, 
            Then Workout session should also be started automatically and its state should be set to 'in progress'.
    

- Bulk add or update an entity with its nested relations:
    - WorkoutPlan [x]
    - WorkoutSession [x]
    - ExercisePlan []    
    - ExerciseResult []
    
- Need to apply validation for session results entries (similar to batch create) [x]:
    - validate the relationship chain (plan id - session id - exercise plan id - set plan id)
    - add unique constraint at db level:
        - (workout_session_id, exercise_plan_id)
        - (exercise_result_id, exercise_set_plan_id)
        - Prevents multiple entries for the same exercise/set result.
    - For a given exercise result, id of exercise plan should be valid and exists.
    - For a given set result, id of set plan should be valid and exists
        - Validity is confirming that that the exercise/set plan id belongs to the chain (plan_id - session_id - exercise_plan_id - set_plan_id)
